// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YemekTarifleri.Data.Concrete.EfCore;

#nullable disable

namespace YemekTarifleri.Migrations
{
    [DbContext(typeof(YemekTarifleriContext))]
    partial class YemekTarifleriContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FoodFtype", b =>
                {
                    b.Property<int>("FoodsFoodId")
                        .HasColumnType("int");

                    b.Property<int>("FtypesTypeID")
                        .HasColumnType("int");

                    b.HasKey("FoodsFoodId", "FtypesTypeID");

                    b.HasIndex("FtypesTypeID");

                    b.ToTable("FoodFtype");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("FoodID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FoodId"));

                    b.Property<int>("Confirmation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("aciklama")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("isim")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("tarih")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FoodId");

                    b.HasIndex("UserID");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Ftype", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TypeID");

                    b.ToTable("Ftypes");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ImageID");

                    b.HasIndex("FoodId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Ingredient", b =>
                {
                    b.Property<int>("IngredientsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("IngredientsID"));

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("IngredientsID");

                    b.HasIndex("FoodID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int>("foodId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("foodId");

                    b.HasIndex("userId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Step", b =>
                {
                    b.Property<int>("StepID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StepID"));

                    b.Property<int>("FoodID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("StepID");

                    b.HasIndex("FoodID");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("KayitTarihi")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("avatarName")
                        .HasColumnType("longtext");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("password")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.View", b =>
                {
                    b.Property<int>("viewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("viewId"));

                    b.Property<string>("EnterDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("viewId");

                    b.HasIndex("FoodId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("FoodFtype", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", null)
                        .WithMany()
                        .HasForeignKey("FoodsFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekTarifleri.Entity.Ftype", null)
                        .WithMany()
                        .HasForeignKey("FtypesTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Comment", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", "Foods")
                        .WithMany("Comments")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekTarifleri.Entity.User", "Users")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Foods");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Food", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.User", "Users")
                        .WithMany("Foods")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Image", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", "food")
                        .WithMany("Images")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("food");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Ingredient", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", "Foods")
                        .WithMany("Ingredients")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Foods");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Like", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", "foods")
                        .WithMany("Likes")
                        .HasForeignKey("foodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YemekTarifleri.Entity.User", "users")
                        .WithMany("Likes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("foods");

                    b.Navigation("users");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Step", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", "Foods")
                        .WithMany("Steps")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Foods");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.User", b =>
                {
                    b.HasOne("Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.View", b =>
                {
                    b.HasOne("YemekTarifleri.Entity.Food", "foods")
                        .WithMany("views")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("foods");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.Food", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Ingredients");

                    b.Navigation("Likes");

                    b.Navigation("Steps");

                    b.Navigation("views");
                });

            modelBuilder.Entity("YemekTarifleri.Entity.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Foods");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
